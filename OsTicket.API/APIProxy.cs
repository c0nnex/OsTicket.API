using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace OsTicket.API
{
    /// <summary>
    /// The OSTicket API Wrapper 
    /// </summary>
    public class APIProxy
    {

        public event EventHandler<RestResponseEventArgs> RequestCompleted;

        /// <summary>
        /// Construct an instance of the API Proxy class
        /// </summary>
        /// <param name="osTicketUrl">The base URL of the OsTicket instance (minus the /api part)</param>
        /// <param name="apiKey">The API Key that was generated by the OsTicket instance.</param>
        public APIProxy(string osTicketUrl, string apiKey)
        {
            this.OsTicketUrl = osTicketUrl;
            this.ApiKey = apiKey;
        }

        /// <summary>
        /// Retrieve a list of priorities from the OsTicket instance
        /// </summary>
        /// <returns>A value to string dictionary of all publicly available priorities in the OsTicket instance</returns>
        /// <remarks>Requires that the Priority.php API extension method be installed on the OsTicket instance</remarks>
        public Dictionary<int, string> GetPriorities()
        {
            RestClient client = new RestClient(OsTicketUrl);

            IRestRequest request = new RestRequest("/api/priority.php", Method.POST);
            request.AddHeader("X-API-KEY", ApiKey);

            IRestResponse response = client.Execute(request);

            JObject root = JObject.Parse(response.Content);
            JsonSerializer serializer = new JsonSerializer();
            return serializer.Deserialize<Dictionary<int, string>>(root.CreateReader());
        }

        /// <summary>
        /// Retrieve a list of help topics from the OsTicket instance
        /// </summary>
        /// <returns>A value to string dictionary of all publicly available help topics in the OsTicket instance</returns>
        /// <remarks>Requires that the Topic.php API extension method be installed on the OsTicket instance</remarks>
        public Dictionary<int, string> GetTopics()
        {
            RestClient client = new RestClient(OsTicketUrl);

            IRestRequest request = new RestRequest("/api/topic.php", Method.POST);
            request.AddHeader("X-API-KEY", ApiKey);

            IRestResponse response = client.Execute(request);

            JObject root = JObject.Parse(response.Content);
            JsonSerializer serializer = new JsonSerializer();
            return serializer.Deserialize<Dictionary<int, string>>(root.CreateReader());
        }

        /// <summary>
        /// Submits a ticket to the OsTicket instance.
        /// </summary>
        /// <param name="ticket">The Ticket to Submit</param>
        /// <returns>The generated ticket id.</returns>
        public int SubmitTicket(Ticket ticket)
        {
            RestClient client = new RestClient(OsTicketUrl);

            IRestRequest request = new RestRequest("/api/tickets.json", Method.POST);
            request.JsonSerializer = new RestSharp.Serializers.NetwonsoftJsonSerializer();
            request.AddHeader("X-API-KEY", ApiKey);
            request.RequestFormat = DataFormat.Json;

            TicketDTO ticketDTO = TicketDTO.CreateFromTicket(ticket);
            JObject jo = JObject.FromObject(ticketDTO);
            foreach (KeyValuePair<string, object> pair in ticket.ExtraFields)
            {
                jo.Add(pair.Key, JToken.FromObject(pair.Value));
            }

            request.AddBody(jo);

            IRestResponse response = client.Execute(request);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                return int.Parse(response.Content);
            }
            else
            {
                throw new Exception(response.Content);
            }
        }

        /// <summary>
        /// Submits a ticket to the OsTicket instance asynchronously.
        /// </summary>
        /// <param name="ticket">The Ticket to Submit</param>
        /// <returns>The generated ticket id.</returns>
        public RestRequestAsyncHandle SubmitTicketAsync(Ticket ticket)
        {
            RestClient client = new RestClient(OsTicketUrl);

            IRestRequest request = new RestRequest("/api/tickets.json", Method.POST);
            request.JsonSerializer = new RestSharp.Serializers.NetwonsoftJsonSerializer();
            request.AddHeader("X-API-KEY", ApiKey);
            request.RequestFormat = DataFormat.Json;

            TicketDTO ticketDTO = TicketDTO.CreateFromTicket(ticket);
            JObject jo = JObject.FromObject(ticketDTO);
            foreach (KeyValuePair<string, object> pair in ticket.ExtraFields)
            {
                jo.Add(pair.Key, JToken.FromObject(pair.Value));
            }

            request.AddBody(jo);

            Action<IRestResponse> action = (restresponse) => { RequestCompleted?.Invoke(this, new RestResponseEventArgs(restresponse)); };

            return client.ExecuteAsync(request,action);

        }

        /// <summary>
        /// The Root URL of the OsTicket instance (http://support.blah.com, not http://support.blah.com/api)
        /// </summary>
        public string OsTicketUrl
        {
            get;
            private set;
        }

        /// <summary>
        /// The API Key generated by OsTicket
        /// </summary>
        public string ApiKey
        {
            get;
            private set;
        }
    }

    public sealed class RestResponseEventArgs : EventArgs
    {
        public IRestResponse RestResponse { get; } = null;
        public int TicketNumber { get; } = -1;
        public bool HasError { get; } = false;
        public string ErrorMessage { get; }
        public RestResponseEventArgs()
        {

        }
        public RestResponseEventArgs(IRestResponse value)
        {
            RestResponse = value;
            if (RestResponse.StatusCode == HttpStatusCode.Created)
            {
                HasError = false;
                TicketNumber = int.Parse(RestResponse.Content);
            }
            else
            {
                HasError = true;
                ErrorMessage = RestResponse.Content;
            }
        }
    }
}
